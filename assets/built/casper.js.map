{"version":3,"sources":["jquery.fitvids.js","gallery-card.js","ghostHunter.js","infinite-scroll.js"],"names":["$","fn","fitVids","options","head","div","settings","customSelector","ignore","document","getElementById","getElementsByTagName","createElement","innerHTML","appendChild","childNodes","extend","this","each","selectors","push","ignoreList","$allVideos","find","join","not","aspectRatio","videoName","$this","parents","length","tagName","toLowerCase","parent","css","isNaN","attr","parseInt","height","width","_count","wrap","removeAttr","window","jQuery","Zepto","addEventListener","querySelectorAll","forEach","image","container","closest","ratio","attributes","value","style","flex","root","factory","getSubpathKey","str","replace","settleIDs","newAttr","getAttribute","setAttribute","grabAndIndex","blogData","latestPost","url","ghost_root_url","ghosthunter_key","params","limit","include","includebodysearch","formats","me","get","done","data","idxSrc","posts","index","lunr","ref","field","arrayItem","itemDate","Date","updated_at","getTime","tag_arr","tags","map","v","name","meta_description","category","parsedData","id","String","title","description","custom_excerpt","pubDate","published_at","tag","plaintext","add","localUrl","subpath","date","d","getDate","getMonth","getFullYear","prettyDate","link","item_preprocessor","Object","assign","subpathKey","localStorage","setItem","JSON","stringify","e","console","warn","indexing_end","isInit","global","step2list","step3list","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","config","builder","Builder","pipeline","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","porterStemmer","w","suffix","firstch","re3","re4","re","stem","re2","fp","substr","toUpperCase","test","exec","version","utils","message","asString","obj","toString","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","indexOf","fieldRef","slice","prototype","undefined","idf","posting","documentCount","documentsWithTerm","keys","x","Math","log","abs","Token","metadata","update","clone","tokenizer","Array","isArray","t","trim","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","position","Pipeline","_stack","registeredFunctions","create","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","fnName","Error","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","i","reduce","memo","token","j","result","concat","runString","reset","toJSON","Vector","elements","_magnitude","positionForIndex","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","val","upsert","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","aVal","bVal","dotProduct","a","b","aLen","bLen","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","C","c","RegExp","generateStopWordFilter","stopWords","words","stopWord","TokenSet","final","edges","_nextId","fromArray","arr","finish","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","noEditNode","char","deletionNode","substitutionNode","insertionNode","charA","charB","transposeNode","frame","pop","wildcardFound","next","prefix","edge","_str","labels","sort","intersect","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","clauses","terms","usePipeline","m","termTokenSet","expandedTerms","expandedTerm","termIndex","_index","k","fieldPosting","matchingDocumentRefs","termField","boost","l","matchingDocumentRef","matchingFieldRef","fieldMatch","MatchData","matchingFieldRefs","results","matches","fieldVector","score","docMatch","matchData","combine","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","number","k1","doc","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","tf","scoreWithPrecision","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","key","otherMatchData","allFields","wildcard","NONE","LEADING","TRAILING","QueryParseError","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","emit","type","escapeCharacter","EOS","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseFieldOrTerm","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parseField","parseTerm","errorMessage","possibleFields","f","nextLexeme","parseEditDistance","parseBoost","define","amd","exports","module","array","getChar","idx","getArrayMember","Levenshtein","str_m","str_n","previous","current","matrix","getElem","_matrix","distance","n_val","n_idx","m_val","m_idx","min","inspect","no_print","getMatrix","max","o","buff","sep","row","cell","getSteps","steps","y","u","Number","MAX_VALUE","valueOf","ghostHunter","opts","defaults","pluginMethods","init","resultsData","onPageLoad","onKeyUp","result_template","info_template","displaySearchInfo","zeroResultsInfo","onComplete","filterfields","indexing_start","lastTimeoutID","target","that","setTimeout","loadAPI","focus","submit","preventDefault","keydown","event","which","keyup","getItem","clearTimeout","thingsFound","valueSplit","split","ilen","searchResult","jlen","otherRefs","klen","empty","append","format","amount","children","eq","replaceWith","lunrref","postData","listItems","currentRefs","newRefs","apiData","html","step","bind","clear","r","feedElement","buffer","ticking","loading","lastScrollY","lastWindowHeight","lastDocumentHeight","nextElement","querySelector","status","removeEventListener","onScroll","onResize","response","item","importNode","resNextElement","href","documentElement","scrollHeight","onUpdate","xhr","XMLHttpRequest","responseType","open","send","requestTick","requestAnimationFrame","scrollY","innerHeight","passive"],"mappings":"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IAAA,GACAC,KAAA,IAIA1N,EAAA,WACA2N,EAAAC,qBAQApL,EAAA,IAAAqL,OALA,4DAMApL,EAAA,IAAAoL,OAJA,8FAKAnL,EAAA,IAAAmL,OANA,gFAOAlL,EAAA,IAAAkL,OALA,kCAOAjL,EAAA,kBACAC,EAAA,iBACAC,EAAA,aACAC,EAAA,kBACAC,EAAA,KACAC,EAAA,cACAC,EAAA,IAAA2K,OAAA,sBACA1K,EAAA,IAAA0K,OAAA,IAAAF,EAAA3N,EAAA,gBAEAoD,EAAA,mBACAC,EAAA,2IAEAC,EAAA,iDAEAC,EAAA,sFACAC,EAAA,oBAEAC,EAAA,WACAC,EAAA,MACAC,EAAA,IAAAkK,OAAA,IAAAF,EAAA3N,EAAA,gBAkIA,SAAA2J,GACA,OAAAA,EAAAxC,OAAA7C,KAIAjF,EAAA8I,SAAAI,iBAAAlJ,EAAA6E,QAAA,WAkBA7E,EAAAyO,uBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAtE,OAAA,SAAAC,EAAAuE,GAEA,OADAvE,EAAAuE,GAAAA,EACAvE,GACA,IAEA,OAAA,SAAAC,GACA,GAAAA,GAAAqE,EAAArE,EAAAlE,cAAAkE,EAAAlE,WAAA,OAAAkE,IAgBAtK,EAAA4E,eAAA5E,EAAAyO,uBAAA,CACA,IACA,OACA,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,KACA,MACA,OAC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","file":"casper.js","sourcesContent":["/*jshint browser:true */\n/*!\n* FitVids 1.3\n*\n*\n* Copyright 2017, Chris Coyier + Dave Rupert + Ghost Foundation\n* This is an unofficial release, ported by John O'Nolan\n* Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/\n* Released under the MIT license\n*\n*/\n\n;(function( $ ){\n\n  'use strict';\n\n  $.fn.fitVids = function( options ) {\n    var settings = {\n      customSelector: null,\n      ignore: null\n    };\n\n    if(!document.getElementById('fit-vids-style')) {\n      // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js\n      var head = document.head || document.getElementsByTagName('head')[0];\n      var css = '.fluid-width-video-container{flex-grow: 1;width:100%;}.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';\n      var div = document.createElement(\"div\");\n      div.innerHTML = '<p>x</p><style id=\"fit-vids-style\">' + css + '</style>';\n      head.appendChild(div.childNodes[1]);\n    }\n\n    if ( options ) {\n      $.extend( settings, options );\n    }\n\n    return this.each(function(){\n      var selectors = [\n        'iframe[src*=\"player.vimeo.com\"]',\n        'iframe[src*=\"youtube.com\"]',\n        'iframe[src*=\"youtube-nocookie.com\"]',\n        'iframe[src*=\"kickstarter.com\"][src*=\"video.html\"]',\n        'object',\n        'embed'\n      ];\n\n      if (settings.customSelector) {\n        selectors.push(settings.customSelector);\n      }\n\n      var ignoreList = '.fitvidsignore';\n\n      if(settings.ignore) {\n        ignoreList = ignoreList + ', ' + settings.ignore;\n      }\n\n      var $allVideos = $(this).find(selectors.join(','));\n      $allVideos = $allVideos.not('object object'); // SwfObj conflict patch\n      $allVideos = $allVideos.not(ignoreList); // Disable FitVids on this video.\n\n      $allVideos.each(function(){\n        var $this = $(this);\n        if($this.parents(ignoreList).length > 0) {\n          return; // Disable FitVids on this video.\n        }\n        if (this.tagName.toLowerCase() === 'embed' && $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) { return; }\n        if ((!$this.css('height') && !$this.css('width')) && (isNaN($this.attr('height')) || isNaN($this.attr('width'))))\n        {\n          $this.attr('height', 9);\n          $this.attr('width', 16);\n        }\n        var height = ( this.tagName.toLowerCase() === 'object' || ($this.attr('height') && !isNaN(parseInt($this.attr('height'), 10))) ) ? parseInt($this.attr('height'), 10) : $this.height(),\n            width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),\n            aspectRatio = height / width;\n        if(!$this.attr('name')){\n          var videoName = 'fitvid' + $.fn.fitVids._count;\n          $this.attr('name', videoName);\n          $.fn.fitVids._count++;\n        }\n        $this.wrap('<div class=\"fluid-width-video-container\"><div class=\"fluid-width-video-wrapper\"></div></div>').parent('.fluid-width-video-wrapper').css('padding-top', (aspectRatio * 100)+'%');\n        $this.removeAttr('height').removeAttr('width');\n      });\n    });\n  };\n\n  // Internal counter for unique video names.\n  $.fn.fitVids._count = 0;\n\n// Works with either jQuery or Zepto\n})( window.jQuery || window.Zepto );\n","/* eslint-env browser */\n\n/**\n * Gallery card support\n * Used on any individual post/page\n *\n * Detects when a gallery card has been used and applies sizing to make sure\n * the display matches what is seen in the editor.\n */\n\n(function (window, document) {\n    var resizeImagesInGalleries = function resizeImagesInGalleries() {\n        var images = document.querySelectorAll('.kg-gallery-image img');\n        images.forEach(function (image) {\n            var container = image.closest('.kg-gallery-image');\n            var width = image.attributes.width.value;\n            var height = image.attributes.height.value;\n            var ratio = width / height;\n            container.style.flex = ratio + ' 1 0%';\n        });\n    };\n\n    document.addEventListener('DOMContentLoaded', resizeImagesInGalleries);\n})(window, document);\n","/**\n* ghostHunter - 0.6.0\n * Copyright (C) 2014 Jamal Neufeld (jamal@i11u.me)\n * MIT Licensed\n * @license\n*/\n(function( $ ) {\n\n\t/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.1.5\n * Copyright (C) 2017 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.1.5\"\n/*!\n * lunr.utils\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf Utils\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf Utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @returns {lunr.Token[]}\n */\nlunr.tokenizer = function (obj) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(lunr.utils.asString(t).toLowerCase())\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        tokens.push(\n          new lunr.Token (str.slice(sliceStart, sliceEnd), {\n            position: [sliceStart, sliceLength],\n            index: tokens.length\n          })\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n\n    tokens = tokens.reduce(function (memo, token, j) {\n      var result = fn(token, j, tokens)\n\n      if (result === void 0 || result === '') return memo\n\n      return memo.concat(result)\n    }, [])\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str) {\n  var token = new lunr.Token (str)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the cosine similarity between this vector and another\n * vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / (this.magnitude() * otherVector.magnitude())\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2017 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      } else {\n        stack.push({\n          node: noEditNode,\n          editsRemaining: frame.editsRemaining,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var char = frame.str.charAt(1),\n          deletionNode\n\n      if (char in frame.node.edges) {\n        deletionNode = frame.node.edges[char]\n      } else {\n        deletionNode = new lunr.TokenSet\n        frame.node.edges[char] = deletionNode\n      }\n\n      if (frame.str.length <= 2) {\n        deletionNode.final = true\n      } else {\n        stack.push({\n          node: deletionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(2)\n        })\n      }\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.editsRemaining > 0 && frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.editsRemaining > 0 && frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      } else {\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // insertion\n    // can only do insertion if there are edits remaining\n    if (frame.editsRemaining > 0) {\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"]\n      } else {\n        var insertionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = insertionNode\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode.final = true\n      } else {\n        stack.push({\n          node: insertionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str\n        })\n      }\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      } else {\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        })\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node,\n      wildcardFound = false\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * As soon as a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      wildcardFound = true\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n\n      // TODO: is this needed anymore?\n      if (wildcardFound) {\n        node.edges[\"*\"] = root\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.documentVectors - Document vectors keyed by document reference.\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null)\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term)\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n\n      clause = JSON.parse(JSON.stringify(clause))\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n          var expandedTerm = expandedTerms[j];\n          var posting = this.invertedIndex[expandedTerm];\n          if (posting) {\n              var termIndex = posting._index;\n          } else {\n              continue;\n          }\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field\n\n          /*\n           * To support field level boosts a query vector is created per\n           * field. This vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           *\n           * If the query vector for this field does not exist yet it needs\n           * to be created.\n           */\n          if (queryVectors[field] === undefined) {\n            queryVectors[field] = new lunr.Vector\n          }\n\n          /*\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, 1 * clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef,\n        fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = {},\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = []\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * @param {string} field - The name of a field to index in all documents.\n */\nlunr.Builder.prototype.field = function (field) {\n  this._fields.push(field)\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * @param {object} doc - The document to add to the index.\n */\nlunr.Builder.prototype.add = function (doc) {\n  var docRef = doc[this._ref]\n\n  this.documentCount += 1\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var fieldName = this._fields[i],\n        field = doc[fieldName],\n        tokens = this.tokenizer(field),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < this._fields.length; k++) {\n          posting[this._fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var field = this._fields[i]\n    accumulator[field] = accumulator[field] / documentsWithField[field]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[field])) + tf)\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: this._fields,\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata)\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n  this.metadata[term] = Object.create(null)\n  this.metadata[term][field] = clonedMetadata\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=0] - Whether the term should have wildcards appended or prepended.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * @param {string} term - The term to add to the query.\n * @param {Object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.prototype.term = function (term, options) {\n  var clause = options || {}\n  clause.term = term\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseFieldOrTerm\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseFieldOrTerm = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n\n\n\t// Adapted from https://github.com/pseudonym117/Levenshtein\n(function(root, factory){\n    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n        define(function(){\n            return factory(root);\n        });\n    } else if (typeof module == 'object' && module && module.exports) {\n        module.exports = factory(root);\n    } else {\n        root.Levenshtein = factory(root);\n    }\n}(this, function(root){\n\n    function forEach( array, fn ) { var i, length\n        i = -1\n        length = array.length\n        while ( ++i < length )\n            fn( array[ i ], i, array )\n    }\n\n    function map( array, fn ) { var result\n        result = Array( array.length )\n        forEach( array, function ( val, i, array ) {\n            result.push( fn( val, i, array ) )\n        })\n        return result\n    }\n\n    function reduce( array, fn, accumulator ) {\n        forEach( array, function( val, i, array ) {\n            accumulator = fn( val, i, array )\n        })\n        return accumulator\n    }\n\n    // For string mode\n    function getChar(str, idx) {\n        return str.charAt(idx);\n    }\n\n    // For array mode\n    function getArrayMember(arr, idx) {\n        return arr[idx];\n    }\n\n    // Levenshtein distance\n    function Levenshtein( str_m, str_n ) {\n        var previous, current, matrix, getElem\n        // Set to string or array mode\n        if (typeof str_m === \"string\" && typeof str_n === \"string\") {\n            getElem = getChar;\n        } else if (typeof str_m === \"object\" && typeof str_n === \"object\") {\n            getElem = getArrayMember;\n        } else {\n            throw \"Levensthtein: input must be two strings or two arrays\"\n        }\n        // Constructor\n        matrix = this._matrix = []\n\n        // Sanity checks\n        if ( str_m == str_n )\n            return this.distance = 0\n        else if ( str_m == '' )\n            return this.distance = str_n.length\n        else if ( str_n == '' )\n            return this.distance = str_m.length\n        else {\n            // Danger Will Robinson\n            previous = [ 0 ]\n            forEach( str_m, function( v, i ) { i++, previous[ i ] = i } )\n\n            matrix[0] = previous\n            forEach( str_n, function( n_val, n_idx ) {\n                current = [ ++n_idx ]\n                forEach( str_m, function( m_val, m_idx ) {\n                    m_idx++\n                    if ( getElem(str_m, m_idx - 1) == getElem(str_n, n_idx - 1) )\n                        current[ m_idx ] = previous[ m_idx - 1 ]\n                    else\n                        current[ m_idx ] = Math.min\n                            ( previous[ m_idx ] + 1        // Deletion\n                            , current[ m_idx - 1 ] + 1     // Insertion\n                            , previous[ m_idx - 1 ] + 1    // Subtraction\n                            )\n                })\n                previous = current\n                matrix[ matrix.length ] = previous\n            })\n\n            return this.distance = current[ current.length - 1 ]\n        }\n    }\n\n    Levenshtein.prototype.toString = Levenshtein.prototype.inspect = function inspect ( no_print ) { var matrix, max, buff, sep, rows\n        matrix = this.getMatrix()\n        max = reduce( matrix,function( m, o ) {\n            return Math.max( m, reduce( o, Math.max, 0 ) )\n        }, 0 )\n        buff = Array( ( max + '' ).length ).join( ' ' )\n\n        sep = []\n        while ( sep.length < (matrix[0] && matrix[0].length || 0) )\n            sep[ sep.length ] = Array( buff.length + 1 ).join( '-' )\n        sep = sep.join( '-+' ) + '-'\n\n        rows = map( matrix, function( row ) { var cells\n            cells = map( row, function( cell ) {\n                return ( buff + cell ).slice( - buff.length )\n            })\n            return cells.join( ' |' ) + ' '\n        })\n\n        return rows.join( \"\\n\" + sep + \"\\n\" )\n    }\n\n    // steps to get from string 1 to string 2\n    Levenshtein.prototype.getSteps = function()     {\n        var steps, matrix, x, y, u, l, d, min\n        steps = []\n        matrix = this.getMatrix()\n        x = matrix.length - 1\n        y = matrix[0].length - 1\n        while(x !== 0 || y !== 0)     {\n            u = y > 0 ? matrix[x][y-1] : Number.MAX_VALUE\n            l = x > 0 ? matrix[x-1][y] : Number.MAX_VALUE\n            d = y > 0 && x > 0 ? matrix[x-1][y-1] : Number.MAX_VALUE\n            min = Math.min(u, l, d)\n            if(min === d) {\n                if(d < matrix[x][y]) {\n                    steps.push(['substitute', y, x])\n                }//  else steps.push(['no-op', y, x])\n                x--\n                y--\n            } else if(min === l) {\n                steps.push(['insert', y, x])\n                x--\n            } else {\n                steps.push(['delete', y, x])\n                y--\n            }\n        }\n        return steps\n    }\n\n    Levenshtein.prototype.getMatrix = function () {\n        return this._matrix.slice()\n    }\n\n    Levenshtein.prototype.valueOf = function() {\n        return this.distance\n    }\n\n    return Levenshtein\n\n}));\n\n\n\t//This is the main plugin definition\n\t$.fn.ghostHunter \t= function( options ) {\n\n\t\t//Here we use jQuery's extend to set default values if they weren't set by the user\n\t\tvar opts \t\t= $.extend( {}, $.fn.ghostHunter.defaults, options );\n\t\tif( opts.results )\n\t\t{\n\t\t\tpluginMethods.init( this , opts );\n\t\t\treturn pluginMethods;\n\t\t}\n\t};\n\t// If the Ghost instance is in a subpath of the site, set subpath\n\t// as the path to the site with a leading slash and no trailing slash\n\t// (i.e. \"/path/to/instance\").\n\t$.fn.ghostHunter.defaults = {\n\t\tresultsData\t\t\t: false,\n\t\tonPageLoad\t\t\t: false,\n\t\tonKeyUp\t\t\t\t: false,\n\t\tresult_template \t: \"<a id='gh-{{ref}}' class='gh-search-item' href='{{link}}'><p><h2>{{title}}</h2><h4>{{pubDate}}</h4></p></a>\",\n\t\tinfo_template\t\t: \"<p>Number of posts found: {{amount}}</p>\",\n\t\tdisplaySearchInfo\t: true,\n\t\tzeroResultsInfo\t\t: true,\n\t\tbefore\t\t\t\t: false,\n\t\tonComplete\t\t\t: false,\n\t\tfilterfields\t\t: false,\n\t\tsubpath\t\t\t\t: \"\",\n\t\titem_preprocessor\t: false,\n\t\tindexing_start\t\t: false,\n\t\tindexing_end\t\t: false,\n\t\tincludebodysearch\t: false\n\t};\n\tvar prettyDate = function(date) {\n\t\tvar d = new Date(date);\n\t\tvar monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\t\t\treturn d.getDate() + ' ' + monthNames[d.getMonth()] + ' ' + d.getFullYear();\n\t};\n\n\tvar getSubpathKey = function(str) {\n\t\treturn str.replace(/^\\//, \"\").replace(/\\//g, \"-\")\n\t};\n\n\tvar lastTimeoutID = null;\n\n\t// We add a prefix to new IDs and remove it after a set of\n\t// updates is complete, just in case a browser freaks over\n\t// duplicate IDs in the DOM.\n\tvar settleIDs = function() {\n\t\t$('.gh-search-item').each(function(){\n\t\t\tvar oldAttr = this.getAttribute('id');\n\t\t\tvar newAttr = oldAttr.replace(/^new-/, \"\");\n\t\t\tthis.setAttribute('id', newAttr);\n\t\t});\n\t};\n\tvar updateSearchList = function(listItems, apiData, steps) {\n\t\tfor (var i=0,ilen=steps.length;i<ilen;i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (step[0] == \"delete\") {\n\t\t\t\tlistItems.eq(step[1]-1).remove();\n\t\t\t} else {\n\t\t\t\tvar lunrref = apiData[step[2]-1].ref;\n\t\t\t\tvar postData = this.blogData[lunrref];\n\t\t\t\tvar html = this.format(this.result_template,postData);\n\t\t\t\tif (step[0] === \"substitute\") {\n\t\t\t\t\tlistItems.eq(step[1]-1).replaceWith(html);\n\t\t\t\t} else if (step[0] === \"insert\") {\n\t\t\t\t\tvar pos;\n\t\t\t\t\tif (step[1] === 0) {\n\t\t\t\t\t\tpos = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpos = (step[1]-1)\n\t\t\t\t\t}\n\t\t\t\t\tlistItems.eq(pos).after(html);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsettleIDs();\n\t}\n\n\tvar grabAndIndex = function(){\n\t\t// console.log('ghostHunter: grabAndIndex');\n\t\tthis.blogData = {};\n\t\tthis.latestPost = 0;\n\t\tvar ghost_root = ghost_root_url || \"/ghost/api/v2\";\n            \tvar url = ghost_root + \"/content/posts/?key=\" + ghosthunter_key + \"&limit=all&include=tags\";\n\n\t\tvar params = {\n\t\t\tlimit: \"all\",\n\t\t\tinclude: \"tags\",\n\t\t};\n\t\tif ( this.includebodysearch ){\n\t\t\tparams.formats=[\"plaintext\"]\n      url += \"&formats=plaintext\"\n\t\t} else {\n\t\t\tparams.formats=[\"\"]\n\t\t}\n\t\tvar me = this;\n    $.get(url).done(function(data){\n\t\t\tvar idxSrc = data.posts;\n\t\t\t// console.log(\"ghostHunter: indexing all posts\")\n\t\t\tme.index = lunr(function () {\n\t\t\t\tthis.ref('id');\n\t\t\t\tthis.field('title');\n\t\t\t\tthis.field('description');\n\t\t\t\tif (me.includebodysearch){\n\t\t\t\tthis.field('plaintext');\n\t\t\t\t}\n\t\t\t\tthis.field('pubDate');\n\t\t\t\tthis.field('tag');\n\t\t\t\tidxSrc.forEach(function (arrayItem) {\n\t\t\t\t\t// console.log(\"start indexing an item: \" + arrayItem.id);\n\t\t\t\t\t// Track the latest value of updated_at,  to stash in localStorage\n\t\t\t\t\tvar itemDate = new Date(arrayItem.updated_at).getTime();\n\t\t\t\t\tvar recordedDate = new Date(me.latestPost).getTime();\n\t\t\t\t\tif (itemDate > recordedDate) {\n\t\t\t\t\t\tme.latestPost = arrayItem.updated_at;\n\t\t\t\t\t}\n\t\t\t\t\tvar tag_arr = arrayItem.tags.map(function(v) {\n\t\t\t\t\t\treturn v.name; // `tag` object has an `name` property which is the value of tag. If you also want other info, check API and get that property\n\t\t\t\t\t})\n\t\t\t\t\tif(arrayItem.meta_description == null) { arrayItem.meta_description = '' };\n\t\t\t\t\tvar category = tag_arr.join(\", \");\n\t\t\t\t\tif (category.length < 1){\n\t\t\t\t\t\tcategory = \"undefined\";\n\t\t\t\t\t}\n\t\t\t\t\tvar parsedData \t= {\n\t\t\t\t\t\tid \t\t\t: String(arrayItem.id),\n\t\t\t\t\t\ttitle \t\t: String(arrayItem.title),\n\t\t\t\t\t\tdescription\t: String(arrayItem.custom_excerpt),\n\t\t\t\t\t\tpubDate \t: String(arrayItem.published_at),\n\t\t\t\t\t\ttag \t\t: category\n\t\t\t\t\t}\n\t\t\t\t\tif  ( me.includebodysearch ){\n\t\t\t\t\t\tparsedData.plaintext=String(arrayItem.plaintext);\n\t\t\t\t\t}\n\t\t\t\t\tthis.add(parsedData)\n\t\t\t\t\tvar localUrl = me.subpath + arrayItem.url\n\t\t\t\t\tme.blogData[arrayItem.id] = {\n\t\t\t\t\t\ttitle: arrayItem.title,\n\t\t\t\t\t\tdescription: arrayItem.custom_excerpt,\n\t\t\t\t\t\tpubDate: prettyDate(parsedData.pubDate),\n\t\t\t\t\t\tlink: localUrl,\n\t\t\t\t\t\ttags: tag_arr\n\t\t\t\t\t};\n\t\t\t\t\t// If there is a metadata \"pre\"-processor for the item, run it here.\n\t\t\t\t\tif (me.item_preprocessor) {\n\t\t\t\t\t\tObject.assign(me.blogData[arrayItem.id], me.item_preprocessor(arrayItem));\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(\"done indexing the item\");\n\t\t\t\t}, this);\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tvar subpathKey = getSubpathKey(me.subpath);\n\t\t\t\tlocalStorage.setItem((\"ghost_\" + subpathKey + \"_lunrIndex\"), JSON.stringify(me.index));\n\t\t\t\tlocalStorage.setItem((\"ghost_\" + subpathKey + \"_blogData\"), JSON.stringify(me.blogData));\n\t\t\t\tlocalStorage.setItem((\"ghost_\" + subpathKey + \"_latestPost\"), me.latestPost);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"ghostHunter: save to localStorage failed: \" + e);\n\t\t\t}\n\t\t\tif (me.indexing_end) {\n\t\t\t\tme.indexing_end();\n\t\t\t}\n\t\t\tme.isInit = true;\n\t\t});\n\t}\n\n\tvar pluginMethods\t= {\n\n\t\tisInit\t\t\t: false,\n\n\t\tinit\t\t\t: function( target , opts ){\n\t\t\tvar that = this;\n\t\t\tthat.target = target;\n\t\t\tObject.assign(this, opts);\n\t\t\t// console.log(\"ghostHunter: init\");\n\t\t\tif ( opts.onPageLoad ) {\n\t\t\t\tfunction miam () {\n\t\t\t\t\tthat.loadAPI();\n\t\t\t\t}\n\t\t\t\twindow.setTimeout(miam, 1);\n\t\t\t} else {\n\t\t\t\ttarget.focus(function(){\n\t\t\t\t\tthat.loadAPI();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttarget.closest(\"form\").submit(function(e){\n\t\t\t\te.preventDefault();\n\t\t\t\tthat.find(target.val());\n\t\t\t});\n\n\t\t\tif( opts.onKeyUp ) {\n\t\t\t\t// In search-as-you-type mode, the Enter key is meaningless,\n\t\t\t\t// so we disable it in the search field. If enabled, some browsers\n\t\t\t\t// will save data to history (even when autocomplete=\"false\"), which\n\t\t\t\t// is an intrusive headache, particularly on mobile.\n\t\t\t\ttarget.keydown(function(event){\n\t\t\t\t\tif (event.which === 13) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttarget.keyup(function(event) {\n\t\t\t\t\tthat.find(target.val());\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t},\n\n\t\tloadAPI\t\t\t: function(){\n\t\t\t// console.log('ghostHunter: loadAPI');\n\t\t\tif(!this.isInit) {\n\t\t\t\t// console.log('ghostHunter: this.isInit is true');\n\t\t\t\tif (this.indexing_start) {\n\t\t\t\t\tthis.indexing_start();\n\t\t\t\t}\n\t\t\t\t// If isInit is falsy, check for data in localStore,\n\t\t\t\t// parse into memory, and declare isInit to be true.\n\t\t\t\ttry {\n\t\t\t\t\tvar subpathKey = getSubpathKey(this.subpath);\n\t\t\t\t\tthis.index = localStorage.getItem((\"ghost_\" + subpathKey + \"_lunrIndex\"));\n\t\t\t\t\tthis.blogData = localStorage.getItem((\"ghost_\" + subpathKey + \"_blogData\"));\n\t\t\t\t\tthis.latestPost = localStorage.getItem((\"ghost_\" + subpathKey + \"_latestPost\"));\n\t\t\t\t\tif (this.latestPost && this.index && this.blogData) {\n\t\t\t\t\t\tthis.latestPost = this.latestPost;\n\t\t\t\t\t\tthis.index = lunr.Index.load(JSON.parse(this.index));\n\t\t\t\t\t\tthis.blogData = JSON.parse(this.blogData);\n\t\t\t\t\t\tthis.isInit = true;\n\t\t\t\t\t}\n\t\t\t\t} catch (e){\n\t\t\t\t\tconsole.warn(\"ghostHunter: retrieve from localStorage failed: \" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.isInit) {\n\t\t\t\t// console.log('ghostHunter: this.isInit recheck is true');\n\t\t\t\t// Check if there are new or edited posts\n\t\t\t\tvar params = {\n\t\t\t\t\tlimit: \"all\",\n\t\t\t\t\tfilter: \"updated_at:>\\'\" + this.latestPost.replace(/\\..*/, \"\").replace(/T/, \" \") + \"\\'\",\n\t\t\t\t\tfields: \"id\"\n\t\t\t\t};\n\tvar ghost_root = ghost_root_url || \"/ghost/api/v2\";\n        var url = ghost_root + \"/content/posts/?key=\" + ghosthunter_key + \"&limit=all&fields=id\" + \"&filter=\" + \"updated_at:>\\'\" + this.latestPost.replace(/\\..*/, \"\").replace(/T/, \" \") + \"\\'\";\n\n\t\t\t\tvar me = this;\n        $.get(url).done(function(data){\n\t\t\t\t\tif (data.posts.length > 0) {\n\t\t\t\t\t\tgrabAndIndex.call(me);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (me.indexing_end) {\n\t\t\t\t\t\t\tme.indexing_end();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tme.isInit = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// console.log('ghostHunter: this.isInit recheck is false');\n\t\t\t\tgrabAndIndex.call(this)\n\t\t\t}\n\t\t},\n\n\n\t\tfind \t\t \t: function(value){\n\t\t\tclearTimeout(lastTimeoutID);\n\t\t\tif (!value) {\n\t\t\t\tvalue = \"\";\n\t\t\t};\n\t\t\tvalue = value.toLowerCase();\n\t\t\tlastTimeoutID = setTimeout(function() {\n\t\t\t\t// Query strategy is lifted from comments on a lunr.js issue: https://github.com/olivernn/lunr.js/issues/256\n\t\t\t\tvar thingsFound = [];\n\t\t\t\t// The query interface expects single terms, so we split.\n\t\t\t\tvar valueSplit = value.split(/\\s+/);\n\t\t\t\tfor (var i=0,ilen=valueSplit.length;i<ilen;i++) {\n\t\t\t\t\t// Fetch a list of matches for each term.\n\t\t\t\t\tvar v = valueSplit[i];\n\t\t\t\t\tif (!v) continue;\n\t\t\t\t\tthingsFound.push(this.index.query(function (q) {\n\t\t\t\t\t\t// For an explanation of lunr indexing options, see the lunr.js\n\t\t\t\t\t\t// documentation at https://lunrjs.com/docs/lunr.Query.html#~Clause\n\n\t\t\t\t\t\t// look for an exact match and apply a large positive boost\n\t\t\t\t\t\tq.term(v, {\n\t\t\t\t\t\t\tusePipeline: true,\n\t\t\t\t\t\t\tboost: 100,\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// look for terms that match the beginning of this queryTerm and apply a medium boost\n\t\t\t\t\t\tq.term(v, {\n\t\t\t\t\t\t\tusePipeline: false,\n\t\t\t\t\t\t\tboost: 10,\n\t\t\t\t\t\t\twildcard: lunr.Query.wildcard.TRAILING\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// look for terms that match with an edit distance of 1 and apply a small boost\n\t\t\t\t\t\tq.term(v, {\n\t\t\t\t\t\t\tusePipeline: false,\n\t\t\t\t\t\t\teditDistance: 1,\n\t\t\t\t\t\t\tboost: 1\n\t\t\t\t\t\t});\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\tvar searchResult;\n\t\t\t\tif (thingsFound.length > 1) {\n\t\t\t\t\t// If we had multiple terms, we'll have multiple lists. We filter\n\t\t\t\t\t// them here to use only items that produce returns for all\n\t\t\t\t\t// terms. This spoofs an AND join between terms, which lunr.js can't\n\t\t\t\t\t// yet do internally.\n\t\t\t\t\t// By using the first list of items as master, we get weightings\n\t\t\t\t\t// based on the first term entered, which is more or less\n\t\t\t\t\t// what we would expect.\n\t\t\t\t\tvar searchResult = thingsFound[0];\n\t\t\t\t\tthingsFound = thingsFound.slice(1);\n\t\t\t\t\tfor (var i=searchResult.length-1;i>-1;i--) {\n\t\t\t\t\t\tvar ref = searchResult[i].ref;\n\t\t\t\t\t\tfor (j=0,jlen=thingsFound.length;j<jlen;j++) {\n\t\t\t\t\t\t\tvar otherRefs = {}\n\t\t\t\t\t\t\tfor (var k=0,klen=thingsFound[j].length;k<klen;k++) {\n\t\t\t\t\t\t\t\totherRefs[thingsFound[j][k].ref] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!otherRefs[ref]) {\n\t\t\t\t\t\t\t\tsearchResult = searchResult.slice(0, i).concat(searchResult.slice(i+1));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (thingsFound.length === 1) {\n\t\t\t\t\t// If we had just one term and one list, return that.\n\t\t\t\t\tsearchResult = thingsFound[0];\n\t\t\t\t} else {\n\t\t\t\t\t// If there was no search result, return an empty list.\n\t\t\t\t\tsearchResult = [];\n\t\t\t\t}\n\n\t\t\t\tvar results \t\t= $(this.results);\n\t\t\t\tvar resultsData \t= [];\n\t\t\t\tif (searchResult.length === 0) {\n\t\t\t\t\tresults.empty();\n\t\t\t\t\tif (this.displaySearchInfo && this.zeroResultsInfo) {\n\t\t\t\t\t\tresults.append(this.format(this.info_template,{\"amount\":0}));\n\t\t\t\t\t}\n\t\t\t\t} else if (this.displaySearchInfo) {\n\t\t\t\t\tif (results.length > 0) {\n\t\t\t\t\t\tresults.children().eq(0).replaceWith(this.format(this.info_template,{\"amount\":searchResult.length}));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults.append(this.format(this.info_template,{\"amount\":searchResult.length}));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(this.before) {\n\t\t\t\t\tthis.before();\n\t\t\t\t};\n\n\t\t\t\t// Get the blogData for the full set, for onComplete\n\t\t\t\tfor (var i = 0; i < searchResult.length; i++) {\n\t\t\t\t\tvar lunrref\t\t= searchResult[i].ref;\n\t\t\t\t\tvar postData  \t= this.blogData[lunrref];\n\t\t\t\t\tif (postData) {\n\t\t\t\t\t\tpostData.ref = lunrref;\n\t\t\t\t\t\tresultsData.push(postData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"ghostHunter: index/data mismatch. Ouch.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Get an array of IDs present in current results\n\t\t\t\tvar listItems = $('.gh-search-item');\n\t\t\t\tvar currentRefs = listItems\n\t\t\t\t\t.map(function(){\n\t\t\t\t\t\treturn this.id.slice(3);\n\t\t\t\t\t}).get();\n\t\t\t\tif (currentRefs.length === 0) {\n\t\t\t\t\tfor (var i=0,ilen=resultsData.length;i<ilen;i++) {\n\t\t\t\t\t\tresults.append(this.format(this.result_template,resultsData[i]));\n\t\t\t\t\t}\n\t\t\t\t\tsettleIDs();\n\t\t\t\t} else {\n\t\t\t\t\t// Get an array of IDs present in searchResult\n\t\t\t\t\tvar newRefs = [];\n\t\t\t\t\tfor (var i=0,ilen=searchResult.length;i<ilen;i++) {\n\t\t\t\t\t\tnewRefs.push(searchResult[i].ref)\n\t\t\t\t\t}\n\t\t\t\t\t// Get the Levenshtein steps needed to transform current into searchResult\n\t\t\t\t\tvar levenshtein = new Levenshtein(currentRefs, newRefs);\n\t\t\t\t\tvar steps = levenshtein.getSteps();\n\t\t\t\t\t// Apply the operations\n\t\t\t\t\tupdateSearchList.call(this, listItems, searchResult, steps);\n\t\t\t\t}\n\t\t\t\t// Tidy up\n\t\t\t\tif(this.onComplete) {\n\t\t\t\t\tthis.onComplete(resultsData);\n\t\t\t\t};\n\t\t\t}.bind(this), 100);\n\t\t},\n\n\t\tclear \t\t\t: function(){\n\t\t\t$(this.results).empty();\n\t\t\tthis.target.val(\"\");\n\t\t},\n\n\t\tformat \t\t\t: function (t, d) {\n\t\t\treturn t.replace(/{{([^{}]*)}}/g, function (a, b) {\n\t\t\t\tvar r = d[b];\n\t\t\t\treturn typeof r === 'string' || typeof r === 'number' ? r : a;\n\t\t\t});\n\t\t}\n\t}\n\n})( jQuery );","/* eslint-env browser */\n\n/**\n * Infinite Scroll\n * Used on all pages where there is a list of posts (homepage, tag index, etc).\n *\n * When the page is scrolled to 300px from the bottom, the next page of posts\n * is fetched by following the the <link rel=\"next\" href=\"...\"> that is output\n * by {{ghost_head}}.\n *\n * The individual post items are extracted from the fetched pages by looking for\n * a wrapper element with the class \"post-card\". Any found elements are appended\n * to the element with the class \"post-feed\" in the currently viewed page.\n */\n\n(function (window, document) {\n    // next link element\n    var nextElement = document.querySelector('link[rel=next]');\n    if (!nextElement) {\n        return;\n    }\n\n    // post feed element\n    var feedElement = document.querySelector('.post-feed');\n    if (!feedElement) {\n        return;\n    }\n\n    var buffer = 300;\n\n    var ticking = false;\n    var loading = false;\n\n    var lastScrollY = window.scrollY;\n    var lastWindowHeight = window.innerHeight;\n    var lastDocumentHeight = document.documentElement.scrollHeight;\n\n    function onPageLoad() {\n        if (this.status === 404) {\n            window.removeEventListener('scroll', onScroll);\n            window.removeEventListener('resize', onResize);\n            return;\n        }\n\n        // append contents\n        var postElements = this.response.querySelectorAll('article.post-card');\n        postElements.forEach(function (item) {\n            // document.importNode is important, without it the item's owner\n            // document will be different which can break resizing of\n            // `object-fit: cover` images in Safari\n            feedElement.appendChild(document.importNode(item, true));\n        });\n\n        // set next link\n        var resNextElement = this.response.querySelector('link[rel=next]');\n        if (resNextElement) {\n            nextElement.href = resNextElement.href;\n        } else {\n            window.removeEventListener('scroll', onScroll);\n            window.removeEventListener('resize', onResize);\n        }\n\n        // sync status\n        lastDocumentHeight = document.documentElement.scrollHeight;\n        ticking = false;\n        loading = false;\n    }\n\n    function onUpdate() {\n        // return if already loading\n        if (loading) {\n            return;\n        }\n\n        // return if not scroll to the bottom\n        if (lastScrollY + lastWindowHeight <= lastDocumentHeight - buffer) {\n            ticking = false;\n            return;\n        }\n\n        loading = true;\n\n        var xhr = new window.XMLHttpRequest();\n        xhr.responseType = 'document';\n\n        xhr.addEventListener('load', onPageLoad);\n\n        xhr.open('GET', nextElement.href);\n        xhr.send(null);\n    }\n\n    function requestTick() {\n        ticking || window.requestAnimationFrame(onUpdate);\n        ticking = true;\n    }\n\n    function onScroll() {\n        lastScrollY = window.scrollY;\n        requestTick();\n    }\n\n    function onResize() {\n        lastWindowHeight = window.innerHeight;\n        lastDocumentHeight = document.documentElement.scrollHeight;\n        requestTick();\n    }\n\n    window.addEventListener('scroll', onScroll, {passive: true});\n    window.addEventListener('resize', onResize);\n\n    requestTick();\n})(window, document);\n"]}